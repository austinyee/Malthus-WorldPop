!pip install wbdata
import wbdata
wbdata.get_country()
import pandas as pd
import numpy as np
wbdata.get_topic()

variable_labels = {"AG.LND.ARBL.HA":"Arable land (hectacres)"}
variable_labels_fert = {"AG.CON.FERT.ZS" : "Fertilizer consumption (kilograms per hectare of arable land"}
USA = wbdata.get_dataframe(variable_labels, country="USA" )
USAfert= wbdata.get_dataframe(variable_labels_fert, country="USA" )
#USAfood= wbdata.get_dataframe
#NGA USA 
# Date index is of type string; change to integers
USA.index = USA.index.astype(int)
USAfert.index = USAfert.index.astype(int)

# Print a few years' data
#USA.loc["date" :1990]
#USA(index=[1990])
USA.iloc[1:50]
USAfert.iloc[1:50]

USA.iplot(title="Arable Land",xTitle='Year',yTitle='Hectacres')
USAfert.iplot(title="Fertilizer Utilzation", xTitle='Year', yTitle="Hectacres")




Pandas Data frame
#skip until line

def population_dataframes(indicators):
    """Returns a pandas DataFrame indexed by Region or Country and Year, 
    with columns giving counts of people in different age-sex groups."""
    labels = {}
    for i in range(len(indicators)):
        col_id = indicators[i]['id']
        col_name = indicators[i]['name']
        labels[col_id] = col_name

    def find_labels(indicators):
        """Helper function that akes in an indicator object to filter through variable 
        keys and parse through necessary ID's to obtain relevant data. """
        # Filter through column ID strings to obtain relevant population data.
        r = re.compile("(SP.POP).[\d]{2}[A-Z0-9]{2}.[MAFE]{2}$")
        col_keys = list(filter(r.match, labels))

        # Add total population column at the end of COL_KEYS
        col_keys.append('SP.POP.TOTL')

        labels_filtered = {}
        for key, value in labels.items():
            if key in col_keys:
                labels_filtered[key] = value
        return labels_filtered

    df_labels = find_labels(indicators)
    return wbdata.get_dataframe(df_labels)
#______________________________________works for almost all datasets we are looking at 
def pandas_df(region):
    df=wbdata.get_dataframe({'SP.POP.GROW': 'NAC Total Population growth'}, country=region) #change Region and title of data 
    df.index = df.index.rename('year')
    df.index = df.index.astype(int)
    return df
pandas_df("NAC")
#pandas_df("SSF") #when you run it for SSF you will need to change lables 
